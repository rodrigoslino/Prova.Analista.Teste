// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ecommerce.Ui.Tests.Pagamento.Credito
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Forma de pagamento: Cartão", Description="\tComo comprador da Zattini \r\n\tquero selecionar a forma de pagamento como cartão d" +
        "e crédito, \r\n\tpreencher meus dados e prosseguir com o processo de compra.", SourceFile="Pagamento\\Credito\\CartaoDeCredito.feature", SourceLine=0)]
    public partial class FormaDePagamentoCartaoFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CartaoDeCredito.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Forma de pagamento: Cartão", "\tComo comprador da Zattini \r\n\tquero selecionar a forma de pagamento como cartão d" +
                    "e crédito, \r\n\tpreencher meus dados e prosseguir com o processo de compra.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("Realizar login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validação de campos no pagamento por cartão de crédito", new string[] {
                "Browser_Chrome",
                "Browser_Firefox"}, SourceLine=10)]
        public virtual void ValidacaoDeCamposNoPagamentoPorCartaoDeCredito()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validação de campos no pagamento por cartão de crédito", new string[] {
                        "Browser_Chrome",
                        "Browser_Firefox"});
#line 11
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 12
 testRunner.Given("clico nos produtos para CASA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.And("seleciono o primeiro produto", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("clico em comprar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("clico em concluir compra", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("A opção de cartão de crédito deve apresentar campos para preenchimento dos dados " +
                    "do cartão", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And("Número do cartão Aceita somente números", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And("Número do cartão mínimo de 16 caracteres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And("Número do cartão Máximo de 19 caracteres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("Número do cartão Deve existir identificação de bandeira conforme digitação do núm" +
                    "ero", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("Nome do titular Aceita letras e espaços.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("Nome do titular Mínimo de 3 caracteres.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("Nome do titular Máximo de 70 caracteres.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("O nome do titular deve ser sempre composto, ou seja, caso inclua somente 1 nome d" +
                    "eve ser marcado como inválido.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("Data de Validade do cartão Aceita somente números.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("Data de Validade do cartão com Máscara: DD/MM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("Data de Validade do cartão Deve ser apresentada lista de meses e anos.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("Data de Validade do cartão Limites de (01 a 12) para meses e (18 a 48) para anos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("Código de segurança Aceita somente números.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("Código de segurança Mínimo de 3 caracteres.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("Código de segurança Máximo de 4 caracteres.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("Caso a bandeira informada seja AMEX o CVV deve possuir no mínimo de 4 caracteres." +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And("No CVV Para todas as outras bandeiras o mínimo e máximo de caracteres devem ser 3" +
                    ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("Opção de Parcelamento O número de parcelas deve ser apresentado automaticamente n" +
                    "a página, com a opção de pagamento à vista.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("Opção de Parcelamento Deve ser apresentada uma lista de parcelas, calculadas de a" +
                    "cordo com o valor do pedido. A parcela deverá possuir valor mínimo de R$ 40,00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And("Opção de Parcelamento A quantidade de parcelas máxima deverá ser 10.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("Ao clicar no botão de concluir compra e o pedido cair em alguma regra de exceção " +
                    "o cliente irá ver o retorno de alguns dos casos descritos abaixo no painel Caso " +
                    "de exceção.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("Ao clicar no botão de concluir compra e o pedido for realizado com sucesso o clie" +
                    "nte deve visualizar na tela de obrigado o caso de sucesso descrito nessa estória" +
                    ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
